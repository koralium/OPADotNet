/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package testmodule/src */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




#line 3 "function_sdk_api.go"
 #include <stdlib.h>
 typedef char* (*function_cb)(char*);
 char* callFunctionCallback(char* json, function_cb cb);

#line 1 "cgo-generated-wrapper"


#line 3 "remotestore_api.go"
 #include <stdlib.h>
 typedef char* (*read_cb)(char*);
 char* callReadCallback(char* path, read_cb cb);

#line 1 "cgo-generated-wrapper"

#line 3 "store_sdk_api.go"
#include <stdlib.h>

#line 1 "cgo-generated-wrapper"

#line 3 "string_sdk_api.go"
#include <stdlib.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) void RemoveCompiler(GoInt compilerId);
extern __declspec(dllexport) int CompilePolicy(char* fileName, char* rawText);
extern __declspec(dllexport) int CompileModules(char* modules);
extern __declspec(dllexport) int GetModules(int compilerId);
extern __declspec(dllexport) int PrepareEvaluation(int compilerId, int storeId, char* query);
extern __declspec(dllexport) void RemoveEvalQuery(int evalQueryId);
extern __declspec(dllexport) int PreparedEval(int evalId, char* input);
extern __declspec(dllexport) void RegisterFunction1(char* name, function_cb callback);
extern __declspec(dllexport) int PreparePartial(GoInt compilerId, GoInt storeId, char* query);
extern __declspec(dllexport) void RemovePartialQuery(GoInt partialQueryId);
extern __declspec(dllexport) int PreparedPartial(GoInt partialId, char* input, char** unknowns, int unknownsLength);
extern __declspec(dllexport) void RegisterRemoteStore(int storeId, char* name, read_cb callback);
extern __declspec(dllexport) GoInt NewStore();
extern __declspec(dllexport) void RemoveStore(GoInt storeId);
extern __declspec(dllexport) int WriteToStore(int storeId, int transactionId, char* path, char* input);
extern __declspec(dllexport) int NewTransaction(int storeId, int write);
extern __declspec(dllexport) void RemoveTransaction(int transactionId);
extern __declspec(dllexport) int CommitTransaction(int storeId, int transactionId);
extern __declspec(dllexport) GoInt UpsertPolicy(int storeId, int transactionId, char* policyName, char* module);
extern __declspec(dllexport) int ReadFromStore(int storeId, int transactionId, char* path);
extern __declspec(dllexport) void FreeString(int index);
extern __declspec(dllexport) char* GetString(int index);

#ifdef __cplusplus
}
#endif
